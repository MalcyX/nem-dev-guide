<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nem Developer&#39;s Guide</title>
    <link>https://rb2nem.github.io/nem-dev-guide/</link>
    <description>Recent content on Nem Developer&#39;s Guide</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Mar 2017 15:02:00 +0200</lastBuildDate>
    
	<atom:link href="https://rb2nem.github.io/nem-dev-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction</title>
      <link>https://rb2nem.github.io/nem-dev-guide/01-intro/</link>
      <pubDate>Sun, 26 Mar 2017 15:02:00 +0200</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/01-intro/</guid>
      <description>Nem Presentation Nem is a blockchain built from scratch, learning some lessons from Bitcoin. If you need an introduction to the blockchain concept, here is a good visual introduction, which also propose an interactive part.
Nem is providing:
 editable n-of-m multi-sig: an action in a Nem account is authorized only if n of m key identified as authorised validate it. When you create your account, it is a 1-of-1 account, meaning only you need to validate any operation.</description>
    </item>
    
    <item>
      <title>About this guide</title>
      <link>https://rb2nem.github.io/nem-dev-guide/02-about/</link>
      <pubDate>Sat, 01 Apr 2017 15:02:00 +0200</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/02-about/</guid>
      <description>This guide is a work in progress, and its organisation might evolve significantly. This page should however give an up to date overview of to use it.
Help improve the guide Every page of this guide is editable by everyone in the web browser on Github thanks to the link &amp;ldquo;Edit this page&amp;rdquo; in the upper right corner. Clicking this link will lead you to Github, asking you to fork the repository to edit the page.</description>
    </item>
    
    <item>
      <title>Setting up the environment</title>
      <link>https://rb2nem.github.io/nem-dev-guide/03-setting-up-environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/03-setting-up-environment/</guid>
      <description>In this chapter we&amp;rsquo;ll start a NIS instance on the testnet, and we&amp;rsquo;ll send it some requests. Let&amp;rsquo;s start!
Using the docker container We have already seen how to run the docker containers accompanying this guide. Let&amp;rsquo;s now use them!
As explained in the description of the docker image, we can start it with this command
nem:~$ ndev  We enter the container running NIS with
nem:~$ ndev -c nis bash  This drops you in a bash shell running in the container, where a NIS instance has been started on the testnet.</description>
    </item>
    
    <item>
      <title>NEM Accounts</title>
      <link>https://rb2nem.github.io/nem-dev-guide/03b-accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/03b-accounts/</guid>
      <description>Private key, public key, address As explained in Chapter 2 of the Technical Reference, an account is an Ed25519 cryptographic keypair associated to a mutable state stored on the NEM blockchain. The state of the account is modified when transactions involving it are accepted by the network.
Nem is using the Ed25519 publick key signature system with the SHA3 hashing algorithm. Ed25519 was introduced when sha3 was not yet standardised, and it uses the SHA512 hashing algorithm (the paper names it Ed25519-SHA-512).</description>
    </item>
    
    <item>
      <title>Blockchain requests</title>
      <link>https://rb2nem.github.io/nem-dev-guide/04-blockchain-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/04-blockchain-requests/</guid>
      <description>In this chapter we&amp;rsquo;ll send blockchain related requests to our NIS instance on the testnet.
Current chain height (/chain/height) The response to this request just contains the height of the blockchain as known by our NIS instance. If you repeat this query just after starting your node, you will see the height returned vary rapidly. Note that it takes some time for your NIS instance to got through the whole blockchain after start up.</description>
    </item>
    
    <item>
      <title>Account requests</title>
      <link>https://rb2nem.github.io/nem-dev-guide/04b-account-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/04b-account-requests/</guid>
      <description>In this chapter we&amp;rsquo;ll send account related requests to our NIS instance on the testnet.
Account data From address (/account/get) An account data can be retrieved with a GET request to /account/get and passing the address in hexadecimal format, i.e. without the &amp;lsquo;-&amp;rsquo;, in the address parameter. Here is a succesful request:
$ http 23.228.67.85:7890/account/get?address=TA6XFSJYZYAIYP7FL7X2RL63647FRMB65YC6CO3G GET/account/get?address=TA6XFSJYZYAIYP7FL7X2RL63647FRMB65YC6CO3GHTTP/1.1 Accept:*/* Accept-Encoding:gzip, deflate Connection:keep-alive Host:23.228.67.85:7890 User-Agent:HTTPie/0.9.2 HTTP/1.1200OK Access-Control-Allow-Headers:Content-Type Access-Control-Allow-Origin:* Content-Encoding:gzip Content-Type:application/json Server:Jetty(9.2.11.v20150529) Transfer-Encoding:chunked Vary:Accept-Encoding, User-Agent { &amp;quot;account&amp;quot;:{ &amp;quot;address&amp;quot;:&amp;quot;TA6XFSJYZYAIYP7FL7X2RL63647FRMB65YC6CO3G&amp;quot;, &amp;quot;balance&amp;quot;:99784000000, &amp;quot;harvestedBlocks&amp;quot;:0, &amp;quot;importance&amp;quot;:0.</description>
    </item>
    
    <item>
      <title>Transactions Overview</title>
      <link>https://rb2nem.github.io/nem-dev-guide/05-transaction-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/05-transaction-overview/</guid>
      <description>In this chapter we will take a closer look at transactions. Transactions can be seen as actions taken on the blockchain, chaging the state of the block chain.
From the NEM API documentation:
Once a transaction is initiated, it is still unconfirmed and thus not yet accepted by the network. At this point it is not yet clear if it will get included in a block. Never rely on a transaction which has the state &#39;unconfirmed&#39;.</description>
    </item>
    
    <item>
      <title>Transfer Transactions</title>
      <link>https://rb2nem.github.io/nem-dev-guide/06-transaction-transfer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/06-transaction-transfer/</guid>
      <description>This chapter will cover transfer transactions, arguably one of the most common transactions on the NEM blockchain.
Unisig transactions We start with unisig transactions. These transactions are initiated from the account sending the funds, and can immediately be accepted in a block. As a reminder, the type of these transactions is 0x101, or 257. Let&amp;rsquo;s take a closer look at a transaction we have already seen in the blockchain requests section, when we validated an Apostile signature.</description>
    </item>
    
    <item>
      <title>Monitoring the blockchain</title>
      <link>https://rb2nem.github.io/nem-dev-guide/07-monitoring-blockchain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/07-monitoring-blockchain/</guid>
      <description>Monitoring the blockchain is possibly an important part of your application on NEM. The most obvious example being monitoring activities involving your account. Two approaches are possible.
The first is polling, meaning that regularly you retrieve the last block and handle it. If your polling interval is significantly smaller than the average block generation time, you can be sure you will handle all blocks. And if your polling interval is bigger and multiple blocks have been generated between two polling, you can still request all new blocks in your handler.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://rb2nem.github.io/nem-dev-guide/80-debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/80-debugging/</guid>
      <description>Debugging REST API requests The docker environment accompanying this guide provides mitmweb to inspect requests sent to the NIS instance running in the container. This section will show how to use it.
We will send requests to out NIS in the ruby language, using the rest-client gem. We will try to get the block at the current height, which, as we have already seen, is obtained by sending a POST request to /block/public/at with a JSON payload telling the height of the block we want to retrieve.</description>
    </item>
    
    <item>
      <title>Code snippets</title>
      <link>https://rb2nem.github.io/nem-dev-guide/90-snippets/</link>
      <pubDate>Sat, 29 Apr 2017 15:02:00 +0200</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/90-snippets/</guid>
      <description>Warning You will find in this section untested code snippets shared only as an example. These are NOT published as functional software! You should write your own version, as these are only examples that worked at a specific time but that might screw things up for you. Do not run this code if you don&amp;rsquo;t understand what it does. Use at your own risk!
Offline transaction Unisig transaction  Description: Create and save to file a transaction for a unisig account.</description>
    </item>
    
    <item>
      <title>Running a node</title>
      <link>https://rb2nem.github.io/nem-dev-guide/95-running-node/</link>
      <pubDate>Sat, 29 Apr 2017 15:02:00 +0200</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/95-running-node/</guid>
      <description>Monitoring your node NIS listens on port 7890, so a first way to monitor your node is to check that your server listens on that port. As an example we will configure UptimeRobot to monitor that port. This should give you the required information to configure any other monitoring solution.
It is possible to get information from a running nis by sending HTTP requests. Several URLS are handled.
Status URLs will give JSON-formatted answers, and their meaning is detaild in the NIS API documentation.</description>
    </item>
    
    <item>
      <title>References</title>
      <link>https://rb2nem.github.io/nem-dev-guide/99-references/</link>
      <pubDate>Sun, 26 Mar 2017 15:02:00 +0200</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/99-references/</guid>
      <description>Here are links that you most certainly will be interested in as a developer.
Papers  NEM technical paper Apostille white paper Catapult white paper  Documentation  NIS API Nem&amp;rsquo;s Github Bitcoin and Cryptocurrency Technologies  Code and Libraries  Official NemProject&amp;rsquo;s github nem-sdk, a javascript/nodejs sdk for nem and the browser. nem-library, an abstraction for NEM Blockchain using a Reactive approach for creating Blockchain applications. nem-api, a javascript API Wrapper for the NIS Layer of the NEM Blockchain Platform.</description>
    </item>
    
    <item>
      <title>NEM&#39;s Developer Guide</title>
      <link>https://rb2nem.github.io/nem-dev-guide/</link>
      <pubDate>Sun, 26 Mar 2017 15:01:27 +0200</pubDate>
      
      <guid>https://rb2nem.github.io/nem-dev-guide/</guid>
      <description>NEM&amp;rsquo;s Developer guide Get all information you need to develop on NEM&amp;rsquo;s technology.</description>
    </item>
    
  </channel>
</rss>